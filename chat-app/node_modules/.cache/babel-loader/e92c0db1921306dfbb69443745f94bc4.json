{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Walid\\\\Documents\\\\Real time chat application using MERN stack\\\\chat-app\\\\src\\\\pages\\\\SetAvatar.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Loader from '../assets/Loader.svg';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { setAvatarRoute } from '../utils/APIRoutes';\nimport Container from '../styled-components/Container';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport toastOptions from '../utils/ToastOptions';\nimport { Buffer } from 'buffer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SetAvatar = () => {\n  _s();\n\n  const api = \"https://api.multiavatar.com/45678945\";\n  const navigate = useNavigate();\n  const [avatars, setAvatars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n\n  const setProfilePicture = async () => {\n    if (selectedAvatar === undefined) {\n      toast.error(\"Please select an avatar\", toastOptions);\n    } else {\n      const user = await JSON.parse(localStorage.getItem('user'));\n      const {\n        data\n      } = await axios.post(`${setAvatarRoute}/${user._id}`, {\n        image: avatars[selectedAvatar]\n      });\n\n      if (data.isSet) {\n        user.isAvatarImageSet = true;\n        user.avatarImage = data.image;\n        localStorage.setItem('user', JSON.stringify(user));\n        navigate('/');\n      }\n    }\n  };\n\n  useEffect(() => {\n    const getImages = async () => {\n      const data = [];\n\n      for (let i = 0; i < 4; i++) {\n        const image = await axios.get(`${api}/${Math.random() * 1000}`);\n        const buffer = new Buffer(image.data);\n        data.push(buffer.toString(\"base64\"));\n      }\n\n      setAvatars(data);\n      setIsLoading(false);\n    };\n\n    getImages();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Loader,\n        alt: \"Loading\",\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pick an avatar as your profile picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatars\",\n        children: avatars.map((avatar, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `avatar ${selectedAvatar === index ? \"selected\" : \"\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/svg+xml;base64,${avatar}`,\n            alt: \"Avatar\",\n            onClick: () => setSelectedAvatar(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 45\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        onClick: setProfilePicture,\n        children: \"Set as Profile Picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SetAvatar, \"Vf3bLGWNS+p8++1hLS4MtcrCzCs=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SetAvatar;\nexport default SetAvatar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetAvatar\");","map":{"version":3,"names":["useEffect","useState","useNavigate","Loader","ToastContainer","toast","setAvatarRoute","Container","axios","toastOptions","Buffer","SetAvatar","api","navigate","avatars","setAvatars","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","undefined","setProfilePicture","error","user","JSON","parse","localStorage","getItem","data","post","_id","image","isSet","isAvatarImageSet","avatarImage","setItem","stringify","getImages","i","get","Math","random","buffer","push","toString","map","avatar","index"],"sources":["C:/Users/Walid/Documents/Real time chat application using MERN stack/chat-app/src/pages/SetAvatar.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Loader from '../assets/Loader.svg';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { setAvatarRoute } from '../utils/APIRoutes';\r\nimport Container from '../styled-components/Container';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios';\r\nimport toastOptions from '../utils/ToastOptions';\r\nimport { Buffer } from 'buffer';\r\n\r\n\r\nconst SetAvatar = () => {\r\n\r\n    const api = \"https://api.multiavatar.com/45678945\";\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [avatars, setAvatars] = useState([]);\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n\r\n    const setProfilePicture = async () => {\r\n        if (selectedAvatar === undefined) {\r\n            toast.error(\"Please select an avatar\", toastOptions);\r\n        }\r\n        else {\r\n            const user = await JSON.parse(localStorage.getItem('user'));\r\n            const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n                image: avatars[selectedAvatar]\r\n            });\r\n            if (data.isSet) {\r\n                user.isAvatarImageSet = true;\r\n                user.avatarImage = data.image;\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                navigate('/');\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getImages = async () => {\r\n            const data = [];\r\n            for (let i = 0; i < 4; i++) {\r\n                const image = await axios.get(\r\n                    `${api}/${Math.random() * 1000}`\r\n                );\r\n                const buffer = new Buffer(image.data);\r\n                data.push(buffer.toString(\"base64\"));\r\n            }\r\n            setAvatars(data);\r\n            setIsLoading(false);\r\n        };\r\n        getImages();\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isLoading ?\r\n                    (<Container>\r\n                        <img\r\n                            src={Loader}\r\n                            alt=\"Loading\"\r\n                            className='loader'\r\n                        />\r\n                    </Container>) : (\r\n                        <Container>\r\n                            <div className='title-container'>\r\n                                <h1>\r\n                                    Pick an avatar as your profile picture\r\n                                </h1>\r\n                            </div>\r\n                            <div className=\"avatars\">\r\n                                {\r\n                                    avatars.map((avatar, index) => (\r\n                                        <div\r\n                                            key={index}\r\n                                            className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"}`}\r\n                                        >\r\n                                            <img\r\n                                                src={`data:image/svg+xml;base64,${avatar}`}\r\n                                                alt=\"Avatar\"\r\n                                                onClick={() => setSelectedAvatar(index)}\r\n                                            />\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            <button\r\n                                className=\"submit-btn\"\r\n                                onClick={setProfilePicture}\r\n                            >\r\n                                Set as Profile Picture</button>\r\n                        </Container>)\r\n            }\r\n            <ToastContainer />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SetAvatar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}